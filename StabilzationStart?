#include <SD.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
Adafruit_BNO055 bno = Adafruit_BNO055();


// I DO NOT KNOW
double xPos = 0, yPos = 0, headingVel = 0;
uint16_t BNO055_SAMPLERATE_DELAY_MS = 10; //how often to read data from the board
uint16_t PRINT_DELAY_MS = 1000; // how often to print the data
uint16_t printCount = 0; //counter to avoid printing every 10MS sample


//velocity = accel*dt (dt in seconds)

double ACCEL_VEL_TRANSITION =  (double)(BNO055_SAMPLERATE_DELAY_MS) / 1000.0;
double ACCEL_POS_TRANSITION = 0.5 * ACCEL_VEL_TRANSITION * ACCEL_VEL_TRANSITION;
double DEG_2_RAD = 0.01745329251; //trig functions require radians, BNO055 outputs degrees



// variables
String payload_state = "stabilization";
int altitude = 21000;
int solenoid_left = 3; //CW
int solenoid_right = 4; //CCW
float angular_velocity = 0;




void setup(void)
{
  Serial.begin(115200);
  pinMode(solenoid_left, OUTPUT);
  pinMode(solenoid_right, OUTPUT);

  while (!Serial) delay(10);  // wait for serial port to open!
  
  if (!bno.begin())
  {
    Serial.print("No BNO055 detected");
    while (1);
  }


  uint8_t sys, gyro, accel, mag;
  bno.getCalibration(&sys, &gyro, &accel, &mag);
}





void loop(void)
{
  while(payload_state == "stabilization"){
    
    Serial.println("You are stabilizing!");
    digitalWrite(solenoid_left, LOW);
    digitalWrite(solenoid_right, LOW);

  Read_Ang_Velocity();

  if(angular_velocity >= 8){
    digitalWrite(solenoid_left, HIGH); //CC
  }
  else if ((angular_velocity <= 1) && (angular_velocity > 0)){
    digitalWrite(solenoid_left, LOW);
  }
  else{
    digitalWrite(solenoid_left, LOW);
  }

  if (angular_velocity <= (0-8)){
    digitalWrite(solenoid_right, HIGH);
  }
  else if((angular_velocity > (0-1)) && (angular_velocity < 0)){
    digitalWrite(solenoid_right, LOW);
  }
  else{
    digitalWrite(solenoid_right, LOW);
  }

  }
}



void Read_Ang_Velocity ()
{
    // Variables to hold the sensor data
    imu::Vector<3> acc = bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
    imu::Vector<3> gyro = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
    imu::Vector<3> mag = bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
    imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);
    imu::Vector<3> linacc = bno.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
    imu::Vector<3> grav = bno.getVector(Adafruit_BNO055::VECTOR_GRAVITY);  

    angular_velocity = gyro.z();
    Serial.println(angular_velocity);
  
  delay(1000);
}



